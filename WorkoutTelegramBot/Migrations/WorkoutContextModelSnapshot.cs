// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkoutTelegramBot.Database;

namespace WorkoutTelegramBot.Migrations
{
    [DbContext(typeof(WorkoutContext))]
    partial class WorkoutContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WorkoutTelegramBot.Database.CompletedWorkout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DailyWorkoutMessageId")
                        .HasColumnType("int");

                    b.Property<int>("TelegramUserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutPlanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DailyWorkoutMessageId");

                    b.HasIndex("TelegramUserId");

                    b.HasIndex("WorkoutPlanId");

                    b.ToTable("CompletedWorkouts");
                });

            modelBuilder.Entity("WorkoutTelegramBot.Database.DailyWorkoutMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("TelegramMessageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DailyWorkoutMessages");
                });

            modelBuilder.Entity("WorkoutTelegramBot.Database.TelegramUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstNameCache")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LastNameCache")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("UsernameCache")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("TelegramUsers");
                });

            modelBuilder.Entity("WorkoutTelegramBot.Database.WorkoutPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Increment")
                        .HasColumnType("int");

                    b.Property<int>("IncrementIntervallInDays")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkoutPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Increment = 1,
                            IncrementIntervallInDays = 1,
                            Type = "Push-ups"
                        },
                        new
                        {
                            Id = 2,
                            Increment = 1,
                            IncrementIntervallInDays = 7,
                            Type = "Pull-ups"
                        },
                        new
                        {
                            Id = 3,
                            Increment = 1,
                            IncrementIntervallInDays = 1,
                            Type = "Sit-ups"
                        });
                });

            modelBuilder.Entity("WorkoutTelegramBot.Database.CompletedWorkout", b =>
                {
                    b.HasOne("WorkoutTelegramBot.Database.DailyWorkoutMessage", "DailyWorkoutMessage")
                        .WithMany("CompletedUsers")
                        .HasForeignKey("DailyWorkoutMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutTelegramBot.Database.TelegramUser", "TelegramUser")
                        .WithMany()
                        .HasForeignKey("TelegramUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkoutTelegramBot.Database.WorkoutPlan", "WorkoutPlan")
                        .WithMany()
                        .HasForeignKey("WorkoutPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyWorkoutMessage");

                    b.Navigation("TelegramUser");

                    b.Navigation("WorkoutPlan");
                });

            modelBuilder.Entity("WorkoutTelegramBot.Database.DailyWorkoutMessage", b =>
                {
                    b.Navigation("CompletedUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
